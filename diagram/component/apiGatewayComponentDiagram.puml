@startuml
!include <C4/C4_Component>

$addRelTagToLegend(D_Rel, "black", "gray", $DASHED_LINE, Not always executed, dashed line)

!unquoted procedure D_Rel($from, $to, $label, $techn="", $descr="", $sprite="", $tags="D_Rel", $link="", $direction = "")
!if ($direction == right)
    $getRel(("-[dashed]right->>"), $from, $to, $label, $techn, $descr, $sprite, $tags, $link)
!elseif ($direction == left)
    $getRel(("-[dashed]left->>"), $from, $to, $label, $techn, $descr, $sprite, $tags, $link)
!elseif ($direction == up)
    $getRel(("-[dashed]up->>"), $from, $to, $label, $techn, $descr, $sprite, $tags, $link)
!elseif ($direction == down)
    $getRel(("-[dashed]down->>"), $from, $to, $label, $techn, $descr, $sprite, $tags, $link)
!else
    $getRel("-[dashed]->>", $from, $to, $label, $techn, $descr, $sprite, $tags, $link)
!endif
increment()
!endprocedure

!unquoted procedure D_Rel_R($from, $to, $label, $techn="", $descr="", $sprite="", $tags="", $link="")
D_Rel($from, $to, $label, $techn, $descr, $sprite, D_Rel, $link, right)
!endprocedure

!unquoted procedure D_Rel_L($from, $to, $label, $techn="", $descr="", $sprite="", $tags="", $link="")
D_Rel($from, $to, $label, $techn, $descr, $sprite, D_Rel, $link, left)
!endprocedure

!unquoted procedure D_Rel_U($from, $to, $label, $techn="", $descr="", $sprite="", $tags="", $link="")
D_Rel($from, $to, $label, $techn, $descr, $sprite, D_Rel, $link, up)
!endprocedure

!unquoted procedure D_Rel_D($from, $to, $label, $techn="", $descr="", $sprite="", $tags="", $link="")
D_Rel($from, $to, $label, $techn, $descr, $sprite, D_Rel, $link, down)
!endprocedure

Container_Ext(id_provider, "Identity Provider", WireMock, "<<Extern Systeem>>\nAuthenticeert gebruikers en geeft token terug")

Container(frontend, "Frontend", "React.JS", "Webapplicatie waar reiziger de reis kan plannen")

Boundary(api_gateway, "Triptop", "ApiGateway Systeem") {
    Component(api_request_interceptor, RequestInterceptor, Spring Boot Component, Onderschept alle requests naar de ApiGateway en voegt een token toe als de request geauthorizeerd is)
    Component(api_auth, Auth, Spring Boot Component, Authenticeerd en authorizeerd gebruikers)
    ComponentDb(api_cache, Cache, Redis, Cached de tokens van de Identity Provider)

    Rel_R(api_request_interceptor, api_auth, Authorizeerd requests met)
    Rel_R(api_auth, api_cache, Leest/Schrijft)
}

D_Rel(api_auth, id_provider, "Controleert of gebruiker geauthenticeerd is")
Lay_R(api_cache, id_provider)

Rel_D(frontend, api_request_interceptor, Verstuurt API request naar, HTTP/JSON)

Container(backend, "Backend", "Java Spring Boot", "Behandelt API-requests, zorgt dat data opgeslagen wordt en geeft de benodigde data terug of door naar andere API's")

D_Rel_D(api_request_interceptor, backend, Verstuurt geauthorizeerde verzoeken door)


SHOW_LEGEND()

@enduml