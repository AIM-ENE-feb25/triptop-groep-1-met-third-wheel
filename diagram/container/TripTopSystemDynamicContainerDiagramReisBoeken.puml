@startuml "Container diagram voor het Triptop systeem"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Dynamic.puml

!define DottedRel(from,to,label,protocol) from -[dashed]-> to : label\n[protocol]
!define DottedRel_U(from,to,label,protocol) from -[dashed]up-> to : label\n[protocol]
!define DottedRel_D(from,to,label,protocol) from -[dashed]down-> to : label\n[protocol]
!define DottedRel_L(from,to,label,protocol) from -[dashed]left-> to : label\n[protocol]
!define DottedRel_R(from,to,label,protocol) from -[dashed]right-> to : label\n[protocol]

SHOW_PERSON_OUTLINE()

title "Dynamisch container diagram voor het Triptop systeem bij het boeken van een reis"
Person(traveler, "Reiziger", "<<Persoon>>\nEen persoon die een vakantiereis wil plannen, boeken en beheren door verschillende bouwstenen te combineren.")

Boundary(system, "Triptop", "Systeem") {
    Container(frontend, "Web applicatie", "React.js", "De website waarmee de gebruiker een reis kan plannen")
    Container(api_gateway, API Gateway, Java Spring Boot, Authenticeerd en authorizeerd api requests)
    Container(backend, "Backend", "Java Spring Boot", "Behandelt API-requests, zorgt dat data opgeslagen wordt en geeft de benodigde data terug of door naar andere API's")
    ContainerDb(db, "Database", "MongoDB", "Slaat inlogdata van gebruikers en hun reisgegevens op")
}

Container_Ext(identity, "IdentityProvider", "WireMock", "Geeft tokens voor gebruikers en slaat deze op")

Rel(traveler, frontend, "Voegt bouwsteen toe")
Rel(frontend, api_gateway, "Stuurt API request met token en bouwsteen", "HTTP/JSON")
DottedRel_R(api_gateway, identity, "Stuurt token controle verzoek", "HTTP/JSON")
DottedRel_L(identity, api_gateway, "Retourneert response over token", "HTTP/JSON")
DottedRel(api_gateway, backend, Stuur geauthorizeerde API request door, "HTTP/JSON")
Rel(backend, db, "Insert bouwsteen", "MongoDb Wire Protocol")

SHOW_LEGEND()

@enduml
