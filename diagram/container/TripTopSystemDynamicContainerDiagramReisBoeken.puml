@startuml "Container diagram voor het Triptop systeem"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Dynamic.puml

$addRelTagToLegend(D_Rel, "black", "gray", $DASHED_LINE, Not always executed, dashed line)

!unquoted procedure D_Rel($from, $to, $label, $techn="", $descr="", $sprite="", $tags="D_Rel", $link="", $direction = "")
!$pre = $getPrefix($index)
!if ($direction == right)
    $getRel(("-[dashed]right->>"), $from, $to, $pre + $label, $techn, $descr, $sprite, $tags, $link)
!elseif ($direction == left)
    $getRel(("-[dashed]left->>"), $from, $to, $pre + $label, $techn, $descr, $sprite, $tags, $link)
!elseif ($direction == up)
    $getRel(("-[dashed]up->>"), $from, $to, $pre + $label, $techn, $descr, $sprite, $tags, $link)
!elseif ($direction == down)
    $getRel(("-[dashed]down->>"), $from, $to, $pre + $label, $techn, $descr, $sprite, $tags, $link)
!else
    $getRel("-[dashed]->>", $from, $to, $pre + $label, $techn, $descr, $sprite, $tags, $link)
!endif
increment()
!endprocedure

!unquoted procedure D_Rel_R($from, $to, $label, $techn="", $descr="", $sprite="", $tags="", $link="")
D_Rel($from, $to, $label, $techn, $descr, $sprite, D_Rel, $link, right)
!endprocedure

!unquoted procedure D_Rel_L($from, $to, $label, $techn="", $descr="", $sprite="", $tags="", $link="")
D_Rel($from, $to, $label, $techn, $descr, $sprite, D_Rel, $link, left)
!endprocedure

!unquoted procedure D_Rel_U($from, $to, $label, $techn="", $descr="", $sprite="", $tags="", $link="")
D_Rel($from, $to, $label, $techn, $descr, $sprite, D_Rel, $link, up)
!endprocedure

!unquoted procedure D_Rel_D($from, $to, $label, $techn="", $descr="", $sprite="", $tags="", $link="")
D_Rel($from, $to, $label, $techn, $descr, $sprite, D_Rel, $link, down)
!endprocedure

SHOW_PERSON_OUTLINE()

title "Dynamisch container diagram voor het Triptop systeem bij het boeken van een reis"
Person(traveler, "Reiziger", "<<Persoon>>\nEen persoon die een vakantiereis wil plannen, boeken en beheren door verschillende bouwstenen te combineren.")

Boundary(system, "Triptop", "Systeem") {
    Container(frontend, "Web applicatie", "React.js", "De website waarmee de gebruiker een reis kan plannen")
    Container(api_gateway, API Gateway, Java Spring Boot, Authenticeerd en authorizeerd api requests)
    Container(backend, "Backend", "Java Spring Boot", "Behandelt API-requests, zorgt dat data opgeslagen wordt en geeft de benodigde data terug of door naar andere API's")
    ContainerDb(db, "Database", "MongoDB", "Slaat inlogdata van gebruikers en hun reisgegevens op")
}

Container_Ext(identity, "IdentityProvider", "WireMock", "Geeft tokens voor gebruikers en slaat deze op")

Rel_D(traveler, frontend, "Voegt bouwsteen toe")
Rel_D(frontend, api_gateway, "Stuurt API request met token en bouwsteen", "HTTP/JSON")
D_Rel_R(api_gateway, identity, "Stuurt token controle verzoek", "HTTP/JSON")
D_Rel_L(identity, api_gateway, "Retourneert response over token", "HTTP/JSON")
D_Rel(api_gateway, backend, Stuur geauthorizeerde API request door, "HTTP/JSON")
Rel_D(backend, db, "Insert bouwsteen", "MongoDb Wire Protocol")

SHOW_LEGEND()

@enduml
